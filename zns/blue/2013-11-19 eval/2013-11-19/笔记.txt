预解析――变量、函数提上去
递归――
引用――赋值，不会复制
异常――try...catch
	不报错

------------------------------------------------------------------------------------------------

var arr=[12,5,7];	//内存存东西



垃圾回收――回收是不要的东西
	如果，变量不用了，可以回收

var b=5;

function show()
{
	var a=12;
}

		//执行前――压根就没有a
show();		//执行中――a产生出来，用
		//执行后――a没用了

变量生存周期――生存期结束了，变量就变成垃圾
    1.局部变量――短：函数结束
    2.全局变量――长：页面结束

function show()
{
	var a=12;
	var b=5;
	
	document.onclick=function ()
	{
		alert(a);
	};
}

show();

document.onclick=null;

子函数依然能访问，父函数的局部变量――不会回收
作用域链上面每一层的所有局部变量，全都保留

闭包：如果子函数还能访问，整个作用域链上所有的变量都不会回收

------------------------------------------------------------------------------------------------

优化
1.网络――
2.执行

------------------------------------------------------------------------------------------------

网络优化：
工具：	F12――高级工具-经验
	YSlow――低级工具-程序

------------------------------------------------------------------------------------------------

方法：
1.减少HTTP请求
	a.合并JS
	b.合并CSS
	c.合并背景图

2.减小体积――压缩
	JS/CSS/HTML――压缩

3.JS阻塞加载
	图片、CSS、各种文件：并行加载、同时加载
	JS文件：在JS加载的时候，不允许任何其他文件加载――无奈

	JS：
	1.本站――不需要注意
	2.外部――重点

	外部JS，放在body最下面；
	最好把外部JS存下来

4.CDN――Content Delivery Network
	1.快
	2.容错
	3.防止攻击

------------------------------------------------------------------------------------------------

执行：
1.稳定性
2.扩展性
3.性能

------------------------------------------------------------------------------------------------

执行性能：
真的有用：
1.DOM操作性能――极低		5000多倍
	减少DOM操作

	运动――重点
		变成背景东西――暂停
		离开可视区――暂停

2.图片
	浏览器特别不擅长处理图片――尤其大的
	1.体积大
	2.尺寸大
	3.不要缩放
	4.平铺

	能不用图片，就别用图片->颜色、边框

------------------------------------------------------------------------------------------------

说说就完：
1.局部变量

局部变量>全局变量>window.a

变量优于属性――属性越多，用起来越慢

变量：局部越快――作用域链越短
变量>属性
属性：对象上属性越多，越慢

2.try――更慢

3.循环――
	for in 比 普通for 慢20多倍

4.循环2――
	先把length存下来，然后再用――快	30%

5.正则快

6.parseInt慢

7.少用eval

8.尽量使用系统函数

9.字符串连接

var str='';

str+='dadfadsdavasdvzcvxz';
str+='dadfadsdavasdvzcvxz';
str+='dadfadsdavasdvzcvxz';
str+='dadfadsdavasdvzcvxz';
str+='dadfadsdavasdvzcvxz';


var arr=[];

arr.push('adfadssadfadf');
arr.push('adfadssadfadf');
arr.push('adfadssadfadf');
arr.push('adfadssadfadf');
arr.push('adfadssadfadf');

arr.join('');

------------------------------------------------------------------------------------------------

function ()
{
	alert('abc');
}

new Function("alert('abc');")


[1,2,3]
new Array(1,2,3)

function (){}
new Function()











