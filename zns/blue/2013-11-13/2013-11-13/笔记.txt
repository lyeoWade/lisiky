$()

.css()
.attr()
.html()

.click/mouseover

.bind/.live
.unbind/.die

DOM
$('<div>')

插件
$('a').fancybox()

$.fn.xxx=function ...
$.fn.extend({
	
});

------------------------------------------------------------------------------------------------

1.复合
li.box
div#div1

2.属性
input[type=button]

3.伪类
:first
:last
:odd

------------------------------------------------------------------------------------------------

面向对象――

Date/Array/RegExp

Date.getFullYear()
RegExp.test()

1.不用管对象的原理，只需要知道怎么用

------------------------------------------------------------------------------------------------

用对象的人	轻松
写对象的人	工资高

------------------------------------------------------------------------------------------------

JS对象组成
属性――变量
方法――函数

任何对象都可以随便添加属性、方法

aDiv[i].index=i;


定义：
函数――不属于任何对象
方法――属于某个对象

------------------------------------------------------------------------------------------------

this――发生事件的对象
	当前的方法属于谁――this就是谁

this：谁调用它

------------------------------------------------------------------------------------------------

属性、方法
this：方法属于谁
	如果没有，也找window【bug】

------------------------------------------------------------------------------------------------

原型――prototype

css

class	一次改变一组
行间	一次改变一个


.box {background: red;}

<div class="box" style="background:green;"></div>
<div class="box"></div>
<div class="box"></div>
<div class="box"></div>
<div class="box"></div>
<div class="box"></div>

------------------------------------------------------------------------------------------------

类		Array	模子：本身没法用，用来造产品
对象、实例	arr	产品：可以用

var arr=new Array(1,2,3);


arr.push(5)
Array.push(6);

原型：增强系统对象的功能

------------------------------------------------------------------------------------------------

微博用户：
{
	属性：
	名字、头像、关注人数。。。。
	方法（操作）：
	发信、添加好友、删除
}

事件函数
回调函数
定时器函数
构造函数――跟普通的函数一模一样

工厂：
1.原料
2.加工
3.产品

------------------------------------------------------------------------------------------------

1.new怎么回事
2.方法重复了（本来就是一样的，存在多份）

new两件事：
1.替你创建空对象
2.替你返回这个空对象
*3.激活prototype

作用域链

------------------------------------------------------------------------------------------------

new 函数

函数.prototype

prototype上面的东西，会在new的时候，来到对象上

------------------------------------------------------------------------------------------------



















