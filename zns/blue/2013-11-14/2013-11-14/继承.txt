对象：
1.属性
2.方法

prototype――原型：给类加东西

类、对象
JS：类==构造函数

------------------------------------------------------------------------------------------------

new：
1.创建空对象->this
2.返回
3.激活prototype

------------------------------------------------------------------------------------------------

JS继承：父级有的东西，子级也会有
CSS继承：父级加了一个样式，子级也会有


类
对象（实例）

------------------------------------------------------------------------------------------------

JS自身的bug

JS里任何东西都是继承自Object

基本类型：12, 'sds', true, undefined

包装类型：Number, String, Boolean		没用

------------------------------------------------------------------------------------------------

instanceof/constructor		检测类型
包装

------------------------------------------------------------------------------------------------

面向过程――函数+函数
面向对象――对象+对象

面向对象思想

------------------------------------------------------------------------------------------------

面向对象写法――好在哪儿	库

避免冲突

------------------------------------------------------------------------------------------------

避免重名：
1.封闭空间
2.面向对象――	对外
3.命名空间――	对内

------------------------------------------------------------------------------------------------

this优先级：
高	new		new出来的Object
	定时器		window
	事件		发生事件的对象
	方法		方法属于谁/谁调用它――点前面
低	其他		window

	*某个东西

注意：this由调用决定的

------------------------------------------------------------------------------------------------

库――JQuery
1.熟悉面向对象
2.整个课程所有东西
3.JQuery原理

------------------------------------------------------------------------------------------------

$(function (){})
$('...')
$(oDiv)
$(arr)

ZQuery(...)

$('li').click(xxx);

$([div1, div2])

$('#div1');	//选出来，存起来

$().css('width')		获取
$().css('width', '200px')	设置
$().css({width: ''200})		批量设置

$(this)

------------------------------------------------------------------------------------------------

this不能用：
1.定时器
2.行间事件
3.套了一层
4.绑定

------------------------------------------------------------------------------------------------

call、apply――改变this

call(this, 参数, 参数, ...)
apply(this, arr)

------------------------------------------------------------------------------------------------













