this
调用一句话

文本节点
children――不包括
childNodes――包括

DOM方法――
创建、插入

while()
{
	childNodes[0]
}

ajax
post方法
1.header	setRequestHeader(名字, 值)
2.send(数据)

------------------------------------------------------------------------------------------------

css/attr
bind/click/mouseover....
hover
mouseleave/mouseenter
toggle
创建元素、appendTo...
animate/slide
事件：return false、ev
ajax――
each
html
链式操作
attr
DOM、JQ元素转换
get/eq

-----------------------------

位置、大小

index

插件

------------------------------------------------------------------------------------------------

oTxt.aaa=xxx				alert(oTxt.aaa);
oTxt.setAttribute('aaa', 'xxx')		alert(oTxt.getAttribute('aaa'));

------------------------------------------------------------------------------------------------

原生DOM->JQ	$(xxx)
JQ->原生DOM	.get		结果：原生DOM

		.eq		结果：JQ


$('ul li:eq(2) input')

$('ul li input:eq(2)')
$('ul li input').eq(2)


$('li').size()		->8
$('#li1').index()	->0

index――下标，同级元素中的序号

------------------------------------------------------------------------------------------------

插件

------------------------------------------------------------------------------------------------

JQuery

$.fn.aaa=function (){}
$.fn.extend({aaa: function (){}});

------------------------------------------------------------------------------------------------

JQuery、YUI、kissy、tangram

------------------------------------------------------------------------------------------------

预解析：
程序会把所有变量的定义（仅仅是定义）提到“最上面”
最上面――作用域、script标签

函数的定义，也会提到最上面

------------------------------------------------------------------------------------------------

递归――问题都变成小问题

------------------------------------------------------------------------------------------------

兔子：

1月	1对
2月	1对
3月	2对（1老+1小）
4月	3对（1老+2小）
5月	5对（2老+3小）

斐波那契数列
1 1 2 3 5 8 13

n月	

9月

------------------------------------------------------------------------------------------------

var arr=[,,,2,3,5,8,13,21];

f(8)=21

f(7)=13				 f(6)=8
f(6)=8     f(5)=5
f(5)=5 f(4)=3
f(4)=3 f(3)=2
f(3)=2 1
1 1

------------------------------------------------------------------------------------------------

黄金分割	1:0.618		1.618:1

------------------------------------------------------------------------------------------------

引用――内存的某一块地方

------------------------------------------------------------------------------------------------

异常≈报错

异常：程序解决不了的问题（断网了、磁盘满了）

try――尝试

try
{
	可能出错的代码		正常执行	报错
}
catch(e)
{
	补救的代码		不会有用	执行
}

------------------------------------------------------------------------------------------------

try：
1.不便于调试
2.try里面的代码，运行很慢（2-10倍）

用途：
1.用户输入、网络读取
2.线上代码

------------------------------------------------------------------------------------------------


















