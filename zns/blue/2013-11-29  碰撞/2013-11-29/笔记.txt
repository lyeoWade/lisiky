数据结构：
1.堆栈、队列
2.二叉树――平衡
3.散列

------------------------------------------------------------------------------------------------

----------------公共讨论接口-------------------
1.注册
		?a=reg&user=用户名&pass=密码&face=头像ID&cb=xxx
		{err: 0, msg: "注册成功"}

2.登录
		?a=lgn&user=用户名&pass=密码&cb=xxx
		{err: 0, msg: "登录成功", face: 头像ID, login_time: 上次登录时间}

3.发言
		?a=snd_msg&content=内容&cb=xxx
		{err: 0, time: 发布时间, ID: 消息ID}

4.完整获取
		?a=get_msg&cb=xxx
		{err: 0, data: [{ID: 消息ID, post_time: 消息时间,content: 消息内容,username: 发言用户},...]}

5.退出登录
		?a=logout&cb=xxx
		{err: 0, msg: "成功退出登录"}

6.获取用户列表
		?a=get_user_list&cb=xxx
		{err: 0, data: [{ID: 用户ID,username: 用户名,face: 用户头像}]}

7.获取更新
		?a=get_msg_n&n=消息ID&cb=xxx
		{err: 0, data: [{ID:'1',post_time:'1364873875',content:'asdfsdf',face:'1',username:'test',to:'发给谁'},...]}
		关于消息ID：
			“n=消息ID”指的是：已接收过的消息中，最大的“消息ID”，换句话说：get_msg_n命令，返回的是ID比n大的信息，从而不用获取以前的重复消息




----------------私聊部分接口----------------
1.发送好友请求
		?a=v2_send_friend_quest&to_user=用户名
		{err: 0, msg: "已经发送请求，等待接受"}

2.获取好友请求
		?a=v2_get_friend_quest
		{err: 0, data: [{from: 用户名, time: 发起时间}]}

3.同意好友请求
		?a=v2_acc_friend_quest&to_user=用户名
		{err: 0, msg: "成功"}

4.拒绝好友请求
		?a=v2_ref_friend_quest&to_user=用户名
		{err: 0, msg: "成功"}

5.获取好友列表
		?a=v2_get_friend_list
		{err: 0, data: [{user: 用户名, face: 用户头像, online: 在线状态}]}

6.删除好友
		?a=v2_del_friend&to_user=用户名
		{err: 0, msg: "成功"}

7.发消息给好友
		?a=v2_send_msg&to_user=用户名&content=内容
		{err: 0, msg: "成功"}
		
8.接收好友消息
		?a=v2_get_msg
		{err: 0, data: [{user: 用户名, post_time: 发送时间, content: 消息内容}]}
		
		**注意：和QQ一样，本系统不保留历史消息，发送给客户端后，服务器即删除消息

9.发送抖屏给好友
		?a=v2_snd_shake&user=发给谁
		{err: 0, msg: "成功"}
		
10.接收抖屏信息
		?a=v2_get_shake
		{err: 0, data: [{from: 谁发的}]}

问题1.搜索：通过“获取用户列表接口”，自己实现
问题2.表情

------------------------------------------------------------------------------------------------

1.通过ajax请求js文件
2.解析js文件，把其中的模块拿出来
3.调用回调函数

------------------------------------------------------------------------------------------------

运动――弹性、碰撞
对象――继承、对象化组件

------------------------------------------------------------------------------------------------

运动：
匀速、缓冲

弹性、碰撞

------------------------------------------------------------------------------------------------

http://www.cnblogs.com/cloudgamer/archive/2009/01/06/tween.html

------------------------------------------------------------------------------------------------

构造函数：构造器、constructor
循环：遍历、迭代、iterator、loop
each――循环、迭代器
json――字典、键值对儿 key-value、dict（dictionary）
html5
seajs――CMD（common module defination）

------------------------------------------------------------------------------------------------

碰撞

left:300.8px	->	left:300px


oDiv.style.left=300+0.5+'px';	'300.5px'->'300px'

oDiv.style.left=300-0.5+'px';	'299.5px'->'299px'


oDiv.style.left=oDiv.offsetLeft+speed+'px';


oDiv.style.left=0-0.5+'px';	'-0.5px'	'-0px'

------------------------------------------------------------------------------------------------

webQQ2
面向对象












